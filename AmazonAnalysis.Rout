
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Wrangling Data
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   4.0.0     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.1.0     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.4.1 ──
✔ broom        1.0.10     ✔ rsample      1.3.1 
✔ dials        1.4.2      ✔ tailor       0.1.0 
✔ infer        1.0.9      ✔ tune         2.0.0 
✔ modeldata    1.5.1      ✔ workflows    1.3.0 
✔ parsnip      1.3.3      ✔ workflowsets 1.1.1 
✔ recipes      1.3.1      ✔ yardstick    1.3.2 
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(patchwork)
> library(ggplot2)
> library(dplyr)
> library(embed)
> 
> traindata <- vroom("train.csv") %>%
+   mutate(ACTION = factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> ggplot(data = traindata, aes(x = RESOURCE)) +
+   geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value `binwidth`.
> 
> 
> my_recipe <- recipe(ACTION ~ ., data = traindata) %>%
+   step_mutate_at(all_numeric_predictors(), fn=factor) %>% 
+   step_other( all_nominal_predictors(), threshold = 0.001) %>% 
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) 
> 
> 
> 
> 
> prep <- prep(my_recipe)
> baked <- bake(prep, new_data = traindata)
> dim(baked)
[1] 32769    10
> 
> 
> 
> # Logistic Regression
> 
> library(tidymodels)
> 
> testdata <- vroom("test.csv.zip")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> logRegModel <- logistic_reg() %>% 
+   set_engine("glm")
> 
> 
> amazon_wf <- workflow() %>%
+   add_model(logRegModel) %>%
+   add_recipe(my_recipe)
> 
> amazon_fit <- amazon_wf %>%
+   fit(data = traindata)
> 
> amazon_predictions <- predict(amazon_fit,
+                               new_data=testdata,
+                               type= "prob") 
> 
> amazon_predictions <- predict(amazon_fit, new_data = testdata, type = "prob") %>%
+   select(.pred_1)
> 
> submission <- testdata %>%
+   select(id) %>%
+   bind_cols(amazon_predictions) %>%
+   rename(ACTION = .pred_1)
> 
> write_csv(submission, "logreg.csv")
> 
> 
> 
> #Penalized Regression
> 
> library(tidymodels)
> 
> my_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>% 
+   set_engine("glmnet")
> 
> amazon_workflow <- workflow() %>%
+ add_recipe(my_recipe) %>%
+ add_model(my_mod)
> 
> 
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) 
> 
> folds <- vfold_cv(traindata, v = 5, repeats=1)
> CV_results <- amazon_workflow %>%
+ tune_grid(resamples=folds,
+           grid=tuning_grid,
+           metrics=metric_set(roc_auc))
> 
> bestTune <- CV_results %>%
+ select_best(metric = "roc_auc")
> 
> 
> final_wf <-
+ amazon_workflow %>%
+ finalize_workflow(bestTune) %>%
+ fit(data=traindata)
> 
> 
> final_preds <- predict(final_wf, new_data = testdata, type="prob")%>%
+   select(.pred_1)
> 
> 
> 
> submission <- testdata %>%
+   select(id) %>%
+   bind_cols(final_preds) %>%
+   rename(ACTION = .pred_1)
> 
> write_csv(submission, "penlogreg.csv")
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #ssh beb0901@stat-u02.byu.edu
> 
> 
> proc.time()
   user  system elapsed 
361.302   1.888 188.304 
